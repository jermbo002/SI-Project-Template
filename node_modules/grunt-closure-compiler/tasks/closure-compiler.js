module.exports = function( grunt ) {
    'use strict';

    var exec = require( 'child_process' ).exec,
        fs = require( 'fs' ),
        gzip = require( 'zlib' ).gzip;

    // Tasks
    // ----
    grunt.registerMultiTask( 'closure-compiler', 'Minify JS files with Google Closure Compiler.', function() {

        // check for evnrironment variable
        if ( process.env.CLOSURE_PATH === undefined ) {
            grunt.log.error( '' + 
                '/!\\'.red +
                'Set an envrionement variabled called ' +
                'CLOSURE_PATH'.red +
                'and\n make it point to the root of your Closure Compiler install.' +
                '\n' );

            // return error and stop grunt
            return false;
        }

        var closurePath = '',
            reportFile = '',
            data = this.data,
            done = this.async();

        if ( data.closurePath ) {
            closurePath = data.closurePath;
        }
        else if ( process.env.CLOSURE_PATH ) {
            closurePath = process.env.CLOSURE_PATH;
        }
        else {
            grunt.warn( 'Missing path to Closure Compiler' );
            return false;
        }

        var command = 'java -jar ' + closurePath + 'build/compiler.jar';

        data.js = grunt.file.expandFiles( data.js );

        // check data
        if ( !data.js.length ) {
            // This task requires at least one input file
            grunt.warn( 'Missing js property.' );
            return false;
        }

        // loop throuh and min each file sent
        for ( var i = 0, len = data.js.length; i < len; i++ ) {
            (function() {
                var index = i,
                    file = data.js[index],
                    path = file.substring( 0, file.lastIndexOf( '/' ) + 1 ),
                    outputFile = data.outputPath + file.substring( file.lastIndexOf( '/' ) + 1 ).replace( '.js', '.min.js' );
      
                // Build command line.
                command += ' --js ' + file + ' --js_output_file ' + outputFile;
                grunt.log.writeln( '\nCompiling: ' + file + '\nCreating output file: ' + outputFile + '...\n' );
            
                if ( data.externs ) {
                    data.externs = grunt.file.expandFiles( data.externs );
                    command += ' -- externs ' + data.externs.join( ' --externs' );

                    if ( !data.externs.length ) {
                        delete data.externs;
                    }
                }

                if ( data.options.externs ) {
                    data.options.externs = grunt.file.expandFiles( data.options.externs );

                    if ( !data.options.externs.length ) {
                        delete data.options.externs;
                    }
                }

                for ( var directive in data.options ) {
                    if ( Array.isArray( data.options[directive] ) ) {
                        command += ' --' + directive + ' ' + data.options[directive].join( ' --' + directive + ' ' );
                    }
                    else {
                        command += ' --' + directive + ' ' + String( data.options[directive] );
                    }
                }
            
                // Minify WebGraph class.
                exec( command, function( err, stdout, stderr ) {
                    if ( err ) {
                        grunt.warn( err );
                        done( false );
                    }

                    grunt.log.writeln( '\nData for ' + outputFile + ':' );

                    if ( stdout ) {
                        grunt.log.writeln( stdout );
                    }

                    // If OK, calculate gzipped file size.
                    var min = fs.readFileSync( outputFile, 'utf8' );
                    grunt.helper( 'min_info', min, function( err ) {
                        if ( err ) {
                            grunt.warn( err );
                            done( false );
                        }
                        
                        if ( index === data.js.length ) {
                            done();
                        }
                    });
                });
            }());
        }

    });

    // Helpers
    // -------
    // Output some size info about a file.
    grunt.registerHelper( 'min_info', function( min, onComplete ) {
        gzip( min, function( err, buffer ) {
            if ( err ) {
                onComplete.call( this, err );
            }

            var gzipSize = buffer.toString().length;
            grunt.log.writeln( 'Compressed size: ' + String( ( gzipSize / 1024).toFixed( 2) ).green + ' kb gzipped (' + String( gzipSize ).green + ' bytes).' );

            onComplete.call( this, null );
        });
    });
};